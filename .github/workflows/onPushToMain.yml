name: version, tag and github release

# enable write permissions so can push update README
permissions:
  contents: write

env:
  GH_TOKEN: ${{ secrets.GH_TOKEN }}

on:
  push:
    branches: [main]

jobs:
  get-changed-projects:
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.get-projects.outputs.projects }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 100
          fetch-tags: false
      - name: Get changed projects
        id: get-projects
        run: |
          changed_projects=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | awk -F/ '{print $1}' | sort -u | grep 'obsdev.*')
          if [[ -z "$changed_projects" ]]; then
            echo "No obsdev projects changed, skipping release"
            echo "projects=[]" >> $GITHUB_OUTPUT
          else
            # Convert to JSON array
            json=$(printf '%s\n' $changed_projects | jq -R . | jq -s -c .)
            echo "projects=$json" >> $GITHUB_OUTPUT
          fi

  release:
    needs: get-changed-projects
    if: ${{ needs.get-changed-projects.outputs.projects != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.get-changed-projects.outputs.projects) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - name: Enable corepack
        id: enable-corepack
        run: |
          corepack enable
      - name: Check if version already exists
        id: version-check
        run: |
          cd ${{ matrix.project }}

          # ex: obsdev/v1.0.0
          package_version="${{matrix.project}}/v$(node -p "require('./package.json').version")"
          exists=$(gh api repos/${{ github.repository }}/releases/tags/$package_version >/dev/null 2>&1 && echo "true" || echo "")

          if [ -n "$exists" ];
          then
            echo "Version $package_version already exists"
            echo "::warning file=package.json,line=1::Version $package_version already exists - no release will be created. If you want to create a new release, please update the version in package.json and push again."
            echo "skipped=true" >> $GITHUB_OUTPUT
          else
            echo "Version $package_version does not exist. Creating release..."
            echo "skipped=false" >> $GITHUB_OUTPUT
            echo "tag=$package_version" >> $GITHUB_OUTPUT
          fi
      - name: Setup git
        if: ${{ steps.version-check.outputs.skipped == 'false' }}
        run: |
          git config --global user.email ${{ secrets.GH_EMAIL }}
          git config --global user.name ${{ secrets.GH_USERNAME }}
      - name: Generate oclif README
        if: ${{ steps.version-check.outputs.skipped == 'false' }}
        id: oclif-readme
        run: |
          cd ${{ matrix.project }}

          yarn && yarn build && yarn prepack
          yarn oclif readme
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -am "chore: update ${{ matrix.project }} README.md"
            git pull && push -u origin ${{ github.ref_name }}
          fi
      - name: Create Github Release
        uses: ncipollo/release-action@2c591bcc8ecdcd2db72b97d6147f871fcd833ba5
        if: ${{ steps.version-check.outputs.skipped == 'false' }}
        with:
          name: ${{ steps.version-check.outputs.tag }}
          tag: ${{ steps.version-check.outputs.tag }}
          commit: ${{ github.ref_name }}
          token: ${{ env.GH_TOKEN }}
          skipIfReleaseExists: true
